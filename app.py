import os
import sys
import logging
import asyncio
from datetime import datetime, timedelta

# === Flask ===
from flask import Flask, jsonify

# === ML / Data ===
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from joblib import dump, load

# === Telegram Bot ===
import telegram

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

TICKER = 'GC=F'  # XAU/USD
LOOKBACK_DAYS = 730  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 2 –≥–æ–¥–∞
TRADE_HORIZON = 3  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –≤–ø–µ—Ä—ë–¥
MODEL_PATH = "xauusd_model.pkl"
GRAPH_PATH = "xauusd_signal.png"

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def fetch_data(ticker, lookback_days):
    try:
        logging.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        end_date = datetime.now()
        start_date = end_date - timedelta(days=lookback_days)
        data = yf.download(ticker, start=start_date, end=end_date, interval='1d')
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {data.columns.tolist()}")
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise

def compute_rsi(series, window=14):
    try:
        delta = series.diff().dropna()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)
        avg_gain = gain.rolling(window).mean()
        avg_loss = loss.rolling(window).mean()
        rs = avg_gain / avg_loss
        return 100 - (100 / (1 + rs))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI: {str(e)}")
        raise

def prepare_features(data, horizon):
    try:
        logging.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        data['Return'] = data['Close'].pct_change(horizon).shift(-horizon)
        data['Target'] = np.where(data['Return'] > 0, 1, -1)  # BUY: 1, SELL: -1
        data['SMA_10'] = data['Close'].rolling(10).mean()
        data['SMA_30'] = data['Close'].rolling(30).mean()
        data['RSI'] = compute_rsi(data['Close'], 14)
        data.dropna(inplace=True)
        X = data[['SMA_10', 'SMA_30', 'RSI']]
        y = data['Target']
        logging.info("–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        return X, y, data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {str(e)}")
        raise

# === –ú–æ–¥–µ–ª—å ML ===
def train_or_load_model(X, y):
    try:
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å...")
        model = load(MODEL_PATH)
        pred = model.predict(X)
        acc = accuracy_score(y, pred)
        logging.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: {acc:.2f}")
        return model, acc
    except FileNotFoundError:
        logging.info("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
        model = RandomForestClassifier(n_estimators=100)
        model.fit(X_train, y_train)
        pred = model.predict(X_test)
        acc = accuracy_score(y_test, pred)
        dump(model, MODEL_PATH)
        logging.info(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: {acc:.2f}")
        return model, acc

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram ===
async def send_telegram_signal(signal, entry, tp, sl, risk, current_price, accuracy):
    try:
        bot = telegram.Bot(token=TELEGRAM_TOKEN)

        message = f"""
üìà [XAU/USD Signal] {signal}

üí∞ Current Price: {current_price:.2f}
üîπ Entry: {entry:.2f}
üî∏ TP: {tp:.2f}
üîª SL: {sl:.2f}
ü™ô Risk: {risk:.2f}%
üìä Accuracy: {accuracy * 100:.2f}%
üïí Time: {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """
        await bot.send_message(chat_id=CHAT_ID, text=message)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        generate_graph(current_price, entry, tp, sl)
        with open(GRAPH_PATH, 'rb') as photo:
            await bot.send_photo(chat_id=CHAT_ID, photo=photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Å —Å–∏–≥–Ω–∞–ª–æ–º")
        logging.info(f"Telegram signal sent: {signal}, –¶–µ–Ω–∞: {current_price}, –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise

# === –†–∞—Å—á—ë—Ç –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ ===
def calculate_entry_tp_sl(price, direction):
    try:
        price = float(price)
        volatility = price * 0.01
        if direction == "BUY":
            entry = price
            tp = entry + 2 * volatility
            sl = entry - volatility
        else:
            entry = price
            tp = entry - 2 * volatility
            sl = entry + volatility
        risk = abs(entry - sl) / price * 100 * 0.02 * 100  # 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
        return entry, tp, sl, risk
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞: {str(e)}")
        raise

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Å–∏–≥–Ω–∞–ª–æ–º ===
def generate_graph(current_price, entry, tp, sl):
    try:
        df_plot = fetch_data(TICKER, LOOKBACK_DAYS)
        plt.figure(figsize=(12, 6))
        plt.plot(df_plot.index, df_plot['Close'], label='–¶–µ–Ω–∞ XAU/USD', color='black', alpha=0.5)
        plt.axhline(entry, color='blue', linestyle='--', label='Entry')
        plt.axhline(tp, color='green', linestyle='--', label='Take Profit')
        plt.axhline(sl, color='red', linestyle='--', label='Stop Loss')
        plt.title('XAU/USD —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏')
        plt.legend()
        plt.savefig(GRAPH_PATH)
        plt.close()
        logging.info("–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        raise

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
def main():
    try:
        logging.info("=== –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø MAIN ===")
        df = fetch_data(TICKER, LOOKBACK_DAYS)

        X, y, full_data = prepare_features(df, TRADE_HORIZON)
        model, accuracy = train_or_load_model(X, y)

        last_row = X.iloc[-1].values.reshape(1, -1)
        prediction = model.predict(last_row)[0]
        current_price = float(df['Close'].iloc[-1])

        signal = "BUY" if prediction == 1 else "SELL"
        entry, tp, sl, risk = calculate_entry_tp_sl(current_price, signal)

        asyncio.run(send_telegram_signal(signal, entry, tp, sl, risk, current_price, accuracy))
        logging.info(f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {signal}, Entry: {entry}, TP: {tp}, SL: {sl}, –¶–µ–Ω–∞: {current_price}")

    except Exception as e:
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)

# === Flask App ===
app = Flask(__name__)

@app.route('/')
def index():
    main()  # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    return jsonify({"status": "OK", "message": "Signal sent successfully"})

@app.route('/signal')
def manual_signal():
    main()  # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /signal
    return jsonify({"status": "OK", "message": "Signal manually triggered!"})

@app.errorhandler(Exception)
def handle_exception(e):
    logging.exception("Uncaught exception: %s", str(e))
    return jsonify(error=str(e)), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
